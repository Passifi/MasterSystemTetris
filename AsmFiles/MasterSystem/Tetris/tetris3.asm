XPosStart equ 12
YPosStart equ 5
BlockSprite equ 4

Channel1 equ %10010000 
Channel2 equ %10110000 
Channel3 equ %11010000 
NoiseChannel equ %11110000 
NoteOn equ &F0
NoteOff equ &FF 

;----------------------------------------------------------------------
;Notes 
;----------------------------------------------------------------------
A_1 equ 256
B_1 equ 228
C_1 equ 215
CSharp_1 equ 203 
D_1 equ 191
DSharp_1 equ 181 
E_1 equ  170 
F_1 equ 161 
FSharp_1 equ 152 
G_1 equ 143
GSharp_1 equ 135
A_2 equ 128 



StartOffPlayArea equ $16
LEVEL0 equ 2
ControlTimer equ 10
PSG equ &7f

	include "smsbasic.z80.asm"
	
	org &0000
	jp init
	org &0008
	ds 8,&c9
	ds 8,&c9
	ds 8, &c9 
	ds 8, &c9 
	ds 8,&c9 
	ds 8, &c9 
	call int 
	ei
	ret 
	org &0066	; Position of RMI Vector 
	ds 26,&c9 
	
init:

	di
	im 1
	ld sp, Stack
	
	;initializing Variables to zero 
	ld a,0
	ld (MelodyIndex),a
	ld (PieceNo),a
	ld (ticks),a   
	ld (CurrentPiece),a
	ld (RNGIndex),a 
	ld (ticks+1),a
	ld (InputBuffer),a 
	; the byte address passed is always incremented by one... don't know why
	ld a,&ff
	out (vdpControl),a
	nop 
	nop
	ld a,&3e 
	out (vdpControl),a 
	nop
	nop
	ld a,&d0 
	out (vdpData),a

	;** initialisation BLOCK #INIT **

	;initializing piece Position variables
	
	ld hl, PieceXPos
	ld a, XPosStart
	ld (hl),a 
	ld hl, PieceYPos
	ld a, YPosStart
	ld (hl),a 
	ld hl, b_registeredInput
	ld a, 0 
	ld (hl), a
initSoundLoop:
	ld a,0
	ld (hl),a 
	inc hl
	dec b 
	cp b
	jp nz, initSoundLoop
	ld a,LEVEL0 
	ld (TimeInterval), a
	ld (Timerflags_Music_Control_Logic),a 
	
	; initialize the vdp 
	call initializeVDP
	call initTMap ;draw Map into screen Memory
	
	; loads in piece
	ld b,BlockSprite
	ld hl, PiecePointers+12 ; vector table with all the pieceaddresses 

	ld a, (hl)
	inc hl 
	ld d, (hl) 
	ld h,d 
	ld l,a 
	ld (SwapBuffer),hl 
	ld ix,(SwapBuffer)
	
	; what does this do ? 

	ei

; main just loops continously all game logic is handled on interrupts 

main:
	
	jp main
	
int: ; reminder this is the interrupt sequence so it gets executed on the interrupt 
	di 
	in a,(&bf)
	; timing block 
	ld bc, (TimeInterval) 
	ld a,(ticks) ; make a macro for this 
	inc a 
	ld (ticks),a
	cp c 
	jp nz, returnPart
	; ld a,(ticks+1)
	; inc a
	; ld (ticks+1),a 
	; cp c 
	; jp nz, returnPart
	 





	call readMelodyStream
returnPart:
	ei
	ret 
	

	
updatePSG:

	
	ld a,(hl)
	out (PSG),a 
	ret 
;BIT b,r Test bit b from 8 bit register r and set the Z flag to that bit. 
readMelodyStream: 
	ld a,(MelodyIndex)
	ld c,a 
	ld b,0
	ld hl, Melody 
	add hl, bc 
	call updatePSG
	and &60 
	cp &60 
	jp nz,twoChannelByte
oneChannelByte:
	inc hl 
	inc c 
	call updatePSG
	jp setTimer

twoChannelByte: 
	inc hl 
	inc c 
	call updatePSG
	inc hl 
	inc c 
	call updatePSG

setTimer:
	inc hl 
	inc c 
	ld a,(hl)
	ld (TimeInterval),a
	bit 7,a 
	jp z, setTimer
	inc c 
	ld a,c
	cp EndOfMelody - Melody ;reset a 
	jp c, endLine
	ld a, 0
endLine:
	ld (MelodyIndex),a 
	ret 

	


	


	

PiecePointers:
	dw Square, Line, Triangle, LRight, LLeft,ZigZag1,ZigZag2
	
Square: ; style first db 
 ;which char should be used next four bytes y coords next four bytes x chords
	db 0,0,1,0 
	db 0,1,1,1
	db 0,0,1,0 
	db 0,1,1,1
	db 0,0,1,0 
	db 0,1,1,1
	db 0,0,1,0 
	db 0,1,1,1
	
Line:
	db 0,0,0,1
	db 0,2,0,3
	;rotated 
	db 0,0,0,0
	db 0,8,16,24

	db 0,8,16,24
	db 0,0,0,0
	;rotated 
	db 0,0,0,0
	db 0,8,16,24
	
Triangle:
	
	db 1,0,0,1
	db 1,1,2,1
	
LRight:

	db 0,1,0,2
	db 0,3,1,3
	
LLeft:

	db 1,0,1,1
	db 1,2,0,2
	
ZigZag1:
	db 0,0,1,0
	db 1,1,2,1
ZigZag2:
	db 1,0,2,0
	db 0,1,1,1



Melody:
	db &90 ; attunator
	db &82 ; channelbyte
	db &2f ; channelbyte
	db &9f ; waitbyte ONE
	db &90 ; attuonator
	db &8e ; channelbyte
	db &2f ; channelbyte
	db &9f ; waitbyte
EndOfMelody:
	
Tiledata:
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	
	db &00, &00, &00, &00
	db &3f, &00, &00, &00
	db &7f, &3f, &00, &00
	db &7f, &3f, &00, &00
	db &7f, &3f, &00, &00
	db &7f, &3f, &00, &00
	db &7f, &3f, &00, &00
	db &7f, &3f, &00, &00
	
	db &00, &00, &00, &00
	db &ff, &00, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	
	db &7f, &3f, &00, &00
	db  &7f, &3f, &00, &00
	db &7f, &3f, &00, &00
	db &7f, &3f, &00, &00
	db &7f, &3f, &00, &00
	db &7f, &3f, &00, &00
	db &7f, &3f, &00, &00
	db &7f, &3f, &00, &00
	
	db &00, &ff, &ff, &00
	db &3c, &c3, &ff, &00
	db &66, &81, &ff, &00
	db &42, &81, &ff, &00
	db &42, &81, &ff, &00
	db &66, &81, &ff, &00
	db &3c, &c3, &ff, &00
	db &00, &ff, &ff, &00

	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00

	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
	db &ff, &ff, &00, &00
TiledataEnd: 

PaletteData:
	db 63, 42, 21, 0, 20, 36, 52, 8, 24, 40, 56, 12, 28, 44, 60, 1
	db 63, 42, 21, 0, 20, 36, 52, 8, 24, 40, 56, 12, 28, 44, 60, 1

Tilemapdata:	
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &01, &00, &02, &00, &02, &00, &02, &00, &02, &00, &02, &00, &02, &00, &02, &00, &02, &00, &01, &02, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &02, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &02, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &02, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &02, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &02, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &02, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &02, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &02, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &02, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &02, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &02, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &02, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &02, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &02, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &02, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &03, &02, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &01, &04, &02, &04, &02, &04, &02, &04, &02, &04, &02, &04, &02, &04, &02, &04, &02, &04, &01, &06, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00
	db &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00, &00 
TilemapdataEnd:

RNGStart:
	db &06, &06, &01, &01, &02, &00, &06, &06, &03, &05, &05, &04, &02, &01, &02, &04, &01, &06, &01, &02, &04, &00, &04, &00, &02, &00, &04, &00, &06, &06, &00, &06, &03, &06, &02, &02, &04, &06, &05, &05, &06, &02, &02, &02, &05, &02, &04, &00, &02, &01, &06, &04, &05, &03, &00, &00, &05, &06, &05, &05, &01, &03, &01, &06, &02, &06, &05, &06, &02, &04, &01, &04, &06, &06, &06, &03, &03, &03, &00, &01, &05, &01, &05, &00, &02, &06, &06
	db &02, &03, &03, &02, &06, &03, &04, &05, &04, &02, &00, &00, &03, &05, &05, &00, &04, &01, &03, &04, &06, &05, &03, &00, &03, &01, &00, &00, &01, &00, &00, &00, &05, &05, &00, &02, &05, &02, &04, &01, &04, &01, &06, &03, &02, &04, &06, &01, &03, &05, &00, &05, &01, &06, &05, &03, &02, &03, &02, &05, &03, &00, &04, &05, &06, &06, &06, &06, &02, &04, &00, &06, &00, &06, &05, &05, &04, &02, &03, &03, &06, &06, &06, &06, &05, &06, &02, &06, &03, &02, &06, &00, &06, &01, &03, &03, &04, &03, &02, &03, &01, &02, &03, &03, &04, &00, &01, &04, &00, &00, &04, &05, &04, &05, &01, &02, &02, &02, &06, &02, &06, &03, &03, &02, &01, &00, &02, &03, &05, &04, &05, &00, &06, &03, &01, &06, &01, &03, &06, &05, &06, &00, &02, &00, &02, &04 
	db &06, &02, &01, &03, &04, &01, &00, &05, &03, &06, &04, &06, &04, &05, &01, &00, &06, &00, &03, &03, &00, &06
RNGEnd:	

	org &c000
VarStart:

TimerInterval: 
	db &00, &00

b_registeredInput:
	db &00

PieceXPos:
	db &F1
PieceYPos:
	db &0A 
Timerflags_Music_Control_Logic: ; last 3 bits indictate that either music, control, or logic need to be called 
	db &00
PieceNo:
	db &00 
ticks:
	db &00,&f0

TimeInterval:
	db 0

CurrentPiece:
	db &00
	
SwapBuffer:
	db &00,&00
	
RNGIndex: 
	db 00

TmpX:
    db 00
TmpY:
    db 00,00

InputBuffer:
	db 00

MelodyIndex:
	db 00

VarEnd: